server:
  port: 8081
spring:
  application:
    name: user-server
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/db_user?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC #Asia/Shanghai
    username: root
    password: 123456
  main:
    allow-bean-definition-overriding: true
  data:
    redis:
      host: 127.0.0.1
      port: 7001
      password: 123456
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        username: nacos
        password: nacos
        port: 8081
        namespace: topsource_dev
        group: TOPSOURCE_GROUP
      config:
        import-check:
          enabled: false
    circuitbreaker:
      resilience4j:
        enabled: true
    openfeign:
      circuitbreaker:
        enabled: true
      client:
        config:
          #全局链接时间和超时时间自行定义，默认是1分钟
          default:
            connect-timeout: 1000
            read-timeout: 3000
      # 开起自定义fegin用httpclient5链接，替代httpUrlConntion链接，提高链接性能
      httpclient:
        hc5:
          enabled: true
      compression:
        request:
          enabled: true
          min-request-size: 1024
          mime-types: text/xml,application/xml,application/json
        response:
          enabled: true


#rocketmq:
#  # 命名服务器地址，多个地址用分号分隔
#  name-server: 127.0.0.1:19876
#  producer:
#    # 生产者组名称
#    group: producer_userProcess
#    # 发送消息超时时间，单位毫秒
#    send-message-timeout: 3000
#    # 消息最大大小，单位字节，发送8M的数据
#    max-message-size: 8388608
#    # 开启透明重试机制、默认是false
#    enable-transparent-retry: true
#    # 重试次数
#    retry-times-when-send-failed: 3
#    # 设置异步发送失败时的最大重试次数为 3 次
#    retry-times-when-send-async-failed: 3
#  consumer:
#    # 消费者组名称
#    group: consume_userProcess
#    # 订阅的主题和标签，多个订阅用逗号分隔
#    topic: topic_userProcess
#    # 一次拉取的最大消息数量，默认是10条
#    pull-batch-size: 50
#    # 消费线程最小数量
#    consume-thread-min: 1
#    # 消费线程最大数量
#    consume-thread-max: 50
seata:
  enabled: true
  enable-auto-data-source-proxy: true
  # 事务分组名称，需与Seata Server配置的vgroupMapping中对应
  tx-service-group: my_tx_group
  registry:
    type: nacos
    nacos:
      application: seata-tc-server
      server-addr: 127.0.0.1:8848
      namespace: topsource_dev
      group: SEATA_GROUP
      username: nacos
      password: nacos
  config:
    type: nacos
    nacos:
      application: seata-tc-server
      server-addr: 127.0.0.1:8848
      namespace: topsource_dev
      data-id: seataServer.properties
      group: SEATA_GROUP
      username: nacos
      password: nacos
#eureka:
#  client:
#    service-url:
#      # Eureka 服务器的地址
#      defaultZone: http://127.0.0.1:10011/eureka
#    # 将客户端服务注册到 Eureka 服务器
#    register-with-eureka: true
#    # 从 Eureka 服务器获取服务注册信息
#    fetch-registry: true
#  instance:
#    prefer-ip-address: true # 优先使用 IP 地址进行注册
#    hostname: ${spring.application.name}

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-type: COUNT_BASED
        #表示熔断器会统计最近30次请求，根据这30次请求的成功或失败来计算失败率
        slidingWindowSize: 50
        #5次请求后，熔断器才会计算成功失败率
        minimumNumberOfCalls: 10
        #表示熔断器半开状态，会允许3次请求去调用被保护的服务，根据这3次请求的结果来决定熔断的下一步状态
        #1、半开状态是熔断器从打开（Open）状态过渡到关闭（Closed）状态的中间状态。
        #2、在半开状态下，熔断器会允许一定数量的请求去尝试调用服务，以此来判断服务是否已经恢复正常。
        #3、如果这些尝试请求中的成功率较高，熔断器会关闭；如果失败率再次超过阈值，熔断器会重新打开。
        permittedNumberOfCallsInHalfOpenState: 3
        #表示熔断器打开后会等待3秒，然后再进入半开状态，尝试恢复服务调用
        #当熔断器打开后，在这段时间内所有对被保护服务的请求都会直接触发降级逻辑，不会实际调用服务。
        #等待一段时间的目的是给服务足够的时间来恢复，避免在服务还未恢复时就频繁尝试调用，导致熔断器频繁开合。
        waitDurationInOpenState: 5s
        #表示当最近 slidingWindowSize 次请求（这里是 10 次）中的失败率达到 50% 时，熔断器会打开。
        failureRateThreshold: 50
    instances:
      #第一个熔断
      userServer_circuitbreaker:
        base-config: default
  bulkhead:
    #信号量隔离，对服务进行请求限流
    configs:
      default:
        #最大并发调用数为 10。它限制了对受舱壁保护的资源的并发访问数量。
        #例如，当有多个请求同时尝试访问被该舱壁保护的服务时，最多允许 10 个请求同时进行调用，其余请求将被放入队列（如果队列有空间）或者等待。
        maxConcurrentCalls: 10
        #最大等待时长为 200 毫秒。当请求因为并发调用数达到上限而无法立即执行时，它们会在队列中等待，等待的最长时间为 200 毫秒。
        #如果超过这个时间，请求可能会被拒绝或触发其他处理逻辑。
        maxWaitDuration: 200ms
    instances:
      userServer_BulkheadInstance:
        base-config: default
  timelimiter:
    configs:
      default:
        timeout-duration: 10s

logging:
  level:
    root: info
    com:
      zkcompany:
        fegin:
          UserCenterFegin: debug
  file:
    name: user-server.log
    path: E:/workSpace/topSource/logs/
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"  # 控制台日志输出格式
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"  # 文件日志输出格式
  config: classpath:logback-spring.xml


